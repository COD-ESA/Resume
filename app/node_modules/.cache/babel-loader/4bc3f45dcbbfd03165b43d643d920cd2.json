{"ast":null,"code":"var _jsxFileName = \"/home/sirius/project/site/Resume/app/src/WrapperTask/WrapperTask.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { useContext } from 'react';\nimport { AppContext } from '../App';\nimport { FormEnterTask } from './FormEnterTask/FormEnterTask';\nimport { ListTasks } from './ListTasks/ListTasks';\nimport PropTypes from 'prop-types';\nimport styles from './WrapperTask.module.sass';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function WrapperTask() {\n  _s();\n\n  const {\n    menu,\n    theme\n  } = useContext(AppContext);\n  /*параметр {menu} отвечает за смену css стилей данного компонента*/\n\n  const [task, setTask] = useState([]); // task пушит - handleCreateNewTask() - в себя новые задачи при добавлении или удаляет - deleteTask() - при удалении задачи\n\n  /*\n   * theme = true - светлый стиль сайта/ false - темный стиль сайта\n   * menu = true меню вызвано\n   */\n\n  let cssWrapperTask = menu ? theme ? `${styles.WrapperTask_Menu_Call} ${styles.WrapperTask_Light}` : `${styles.WrapperTask_Menu_Call} ${styles.WrapperTask_Dark}` : theme ? `${styles.WrapperTask} ${styles.WrapperTask_Light}` : `${styles.WrapperTask} ${styles.WrapperTask_Dark}`; // ввод новой задачи в инпут inputTask из модуля FormEnterTask\n\n  const handleCreateNewTask = text => {\n    setTask([...task, {\n      id: task.length + 1,\n      taskBody: text,\n      date: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`\n    }]);\n  };\n  /*\n   * у объекта task есть поле id, которое задается в функции handleCreateNewTask этого\n   * модуля.  id task-а равно длинне массива + 1 на момент создания задачи пользователем\n   * { id: 1, taskBody: \"Написать стили для компонента\", date: \"18.01.2022 17:49:56\" }\n   * id используется для нумерации задач при создании и удалении задач пользователем\n   */\n  // удаление задачи из списка задач (удаляю объект задачи из массива task)\n\n\n  const deleteTask = event => {\n    const promise = new Promise((resolve, reject) => {\n      resolve(event);\n      reject(\"Что то пошло не так в функции deleteTask\");\n    });\n    promise.then(event => event.target.offsetParent.offsetParent.children[1].innerText).then(indexTask => {\n      task.splice(indexTask - 1, 1);\n      return task;\n    }).then(UpdateTask => {\n      let temp = 0;\n      UpdateTask.map(elem => elem.id = ++temp);\n      return UpdateTask;\n    }).then(task => setTask([...task])).catch(info => console.warn(\"info:\", info));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: cssWrapperTask,\n    style: {\n      overflowY: \"scroll-y\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(FormEnterTask, {\n      createNewTask: handleCreateNewTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListTasks, {\n      props: {\n        task: {\n          task\n        },\n        deleteTask: {\n          deleteTask\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WrapperTask, \"GUckUXgMPhKGXm6KKisUZ8O0Ncs=\");\n\n_c = WrapperTask;\nWrapperTask.propTypes = {\n  cssWrapperTask: PropTypes.string,\n  handleCreateNewTask: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"WrapperTask\");","map":{"version":3,"sources":["/home/sirius/project/site/Resume/app/src/WrapperTask/WrapperTask.jsx"],"names":["React","useState","useContext","AppContext","FormEnterTask","ListTasks","PropTypes","styles","WrapperTask","menu","theme","task","setTask","cssWrapperTask","WrapperTask_Menu_Call","WrapperTask_Light","WrapperTask_Dark","handleCreateNewTask","text","id","length","taskBody","date","Date","toLocaleDateString","toLocaleTimeString","deleteTask","event","promise","Promise","resolve","reject","then","target","offsetParent","children","innerText","indexTask","splice","UpdateTask","temp","map","elem","catch","info","console","warn","overflowY","propTypes","string","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState} from 'react';\nimport {useContext} from 'react';\nimport {AppContext} from '../App';\nimport {FormEnterTask} from './FormEnterTask/FormEnterTask'\nimport {ListTasks} from './ListTasks/ListTasks'\nimport PropTypes from 'prop-types';\n\nimport styles from './WrapperTask.module.sass';\n\n\nexport function WrapperTask() {\n\n  const {menu, theme} = useContext(AppContext)/*параметр {menu} отвечает за смену css стилей данного компонента*/\n  const [task, setTask] = useState([ ]);// task пушит - handleCreateNewTask() - в себя новые задачи при добавлении или удаляет - deleteTask() - при удалении задачи\n\n  /*\n   * theme = true - светлый стиль сайта/ false - темный стиль сайта\n   * menu = true меню вызвано\n   */\n  let cssWrapperTask = menu ?\n    (theme ?\n      `${styles.WrapperTask_Menu_Call} ${styles.WrapperTask_Light}`:\n      `${styles.WrapperTask_Menu_Call} ${styles.WrapperTask_Dark}`):\n\n    ( theme ?\n      `${styles.WrapperTask} ${styles.WrapperTask_Light}`:\n      `${styles.WrapperTask} ${styles.WrapperTask_Dark}`)\n\n\n  // ввод новой задачи в инпут inputTask из модуля FormEnterTask\n  const handleCreateNewTask = (text) => {\n    setTask([...task, {\n      id:task.length + 1,\n      taskBody: text,\n      date: `${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`,\n    }])\n  }\n\n/*\n * у объекта task есть поле id, которое задается в функции handleCreateNewTask этого\n * модуля.  id task-а равно длинне массива + 1 на момент создания задачи пользователем\n * { id: 1, taskBody: \"Написать стили для компонента\", date: \"18.01.2022 17:49:56\" }\n * id используется для нумерации задач при создании и удалении задач пользователем\n */\n\n  // удаление задачи из списка задач (удаляю объект задачи из массива task)\n  const deleteTask = (event) => {\n\n    const promise = new Promise( (resolve, reject) =>\n    {\n      resolve(event)\n      reject(\"Что то пошло не так в функции deleteTask\")\n    } )\n\n    promise\n      .then(event => event.target.offsetParent.offsetParent.children[1].innerText)\n      .then( indexTask =>  {task.splice(indexTask-1, 1); return task} )\n      .then( UpdateTask => {\n        let temp = 0;\n        UpdateTask.map( elem =>  elem.id = ++temp);\n        return UpdateTask;\n      } )\n      .then( task => setTask([...task]))\n      .catch( info => console.warn( \"info:\", info ) )\n  }\n\n  return (\n    <main className={cssWrapperTask} style={{overflowY:\"scroll-y\"}}>\n      <FormEnterTask createNewTask={handleCreateNewTask}/>\n      <ListTasks props={{\n                          task: {task},\n                          deleteTask: {deleteTask},\n                        }}>\n        {}\n      </ListTasks>\n    </main>\n\n  )\n}\n\nWrapperTask.propTypes = {\n  cssWrapperTask: PropTypes.string,\n  handleCreateNewTask: PropTypes.func,\n}\n"]},"metadata":{},"sourceType":"module"}